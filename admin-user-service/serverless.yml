service: happ-ms-admin-user
app: happ
projectDir: ../
configValidationMode: error
variablesResolutionMode: 20210326

provider:
  name: aws
  region: ${file(../env.yml):${opt:stage}.region}
  runtime: nodejs20.x
  timeout: 30
  stage: ${opt:stage}
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  logRetentionInDays: 14
  logs:
    restApi: true
  environment:
    ENV_ID: ${file(../env.yml):${opt:stage}.envId}
    STAGE: ${self:provider.stage, 'dev'}
    REGION: ap-south-1
    USER_POOL_APP: ${file(../env.yml):${opt:stage}.userPoolApp}
    USER_POOL_APP_CLIENT: ${file(../env.yml):${opt:stage}.userPoolAppClient}
    USER_POOL_ADMIN: ${file(../env.yml):${opt:stage}.userPoolAdminApp}
    USER_POOL_ADMIN_CLIENT: ${file(../env.yml):${opt:stage}.userPoolAdminClient}
    DEPLOYMENT_BUCKET: ${file(../env.yml):${opt:stage}.deploymentBucket}
    ALLOWED_ORIGINS_S3: ${file(../env.yml):${opt:stage}.allowedOriginsS3}
    ALLOWED_ORIGINS: ${file(../env.yml):${opt:stage}.allowedOrigins}
    ALLOWED_ORIGINS_CF: ${file(../env.yml):${opt:stage}.allowedOriginsCF}
    FRONTEND_BUCKET: ${file(../env.yml):${opt:stage}.frontendBucket}
    UPLOAD_BUCKET: ${file(../env.yml):${opt:stage}.uploadBucket}
    PUBLIC_BUCKET: ${file(../env.yml):${opt:stage}.publicBucket}
    ACCESS_LOGS_BUCKET: ${file(../env.yml):${opt:stage}.accessLogsBucket}
    DB_SUBNET_GROUP: dbsubnetgroup 
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: happ-dev-serverless-deployment # Deployment bucket name. Default is generated by the framework

# package:
#   include:
#     - '**/*'
   
custom:
  prune:
    automatic: true
    number: 3
  warningThreshold: 100
   

functions:
  hello:
    handler: route.hello
    events:
      - http:
          path: /admin-user/hello
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - serverless-cloudformation-resource-counter

resources:
  Resources:
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        Name: Authorizer
        ProviderARNs:
          - Fn::Join:
              - ''
              - - 'arn:aws:cognito-idp:'
                - ${self:provider.region}
                - ':'
                - Ref: AWS::AccountId
                - ':userpool/'
                - Fn::ImportValue: ${self:provider.stage}-AdminUserPoolId