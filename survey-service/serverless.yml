service: survey-service
app: happ
projectDir: ../
configValidationMode: error
variablesResolutionMode: 20210326

provider:
  name: aws
  region: ${file(../env.yml):${opt:stage}.region}
  runtime: nodejs20.x
  timeout: 30
  stage: ${file(../env.yml):${opt:stage}.environment}
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  logRetentionInDays: 14
  logs:
    restApi: true
  environment:
    ENV_ID: ${file(../env.yml):${opt:stage}.envId}
    STAGE: ${self:provider.stage, 'dev'}
    REGION: ${self:provider.region}
    USER_POOL: ${file(../env.yml):${opt:stage}.userPoolApp}
    DEPLOYMENT_BUCKET: ${file(../env.yml):${opt:stage}.deploymentBucket}
    ALLOWED_ORIGINS_S3: ${file(../env.yml):${opt:stage}.allowedOriginsS3}
    ALLOWED_ORIGINS: ${file(../env.yml):${opt:stage}.allowedOrigins}
    ALLOWED_ORIGINS_CF: ${file(../env.yml):${opt:stage}.allowedOriginsCF}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: '*'
        
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: ${self:provider.environment.DEPLOYMENT_BUCKET} # Deployment bucket name. Default is generated by the framework


custom:
  serverless-offline:
    host: 0.0.0.0
  prune:
    automatic: true
    number: 3
  warningThreshold: 100
  apiGatewayThrottling:
    maxRequestsPerSecond: 3000
    maxConcurrentRequests: 2000
   

functions:
  createSurvey:
    handler: route.createSurvey
    events:
      - http:
          cors: true
          method: post
          path: /happ/v1/survey/create
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizerUser
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 10

  createSurveyAdmin:
    handler: route.createSurveyAdmin
    events:
      - http:
          cors: true
          method: post
          path: /happ/v1/survey/admin/create
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizerAdmin
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 10


plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - serverless-cloudformation-resource-counter
  - serverless-api-gateway-throttling
resources:
  Resources:
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    ApiGatewayAuthorizerUser:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        Name: Authorizer
        ProviderARNs:
          - Fn::Join:
              - ''
              - - 'arn:aws:cognito-idp:'
                - ${self:provider.region}
                - ':'
                - Ref: AWS::AccountId
                - ':userpool/'
                - Fn::ImportValue: ${self:provider.stage}-AppUserPoolId

    ApiGatewayAuthorizerAdmin:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        Name: Authorizer
        ProviderARNs:
          - Fn::Join:
              - ''
              - - 'arn:aws:cognito-idp:'
                - ${self:provider.region}
                - ':'
                - Ref: AWS::AccountId
                - ':userpool/'
                - Fn::ImportValue: ${self:provider.stage}-AdminUserPoolId
