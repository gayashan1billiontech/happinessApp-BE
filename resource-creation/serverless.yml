service: happ-ms-resource-creation
app: happ
projectDir: ../
configValidationMode: error
variablesResolutionMode: 20210326

provider:
  name: aws
  region: ap-south-1
  # profile: TestHapinessML
  runtime: nodejs20.x
  timeout: 30
  stage: ${file(../env.yml):${opt:stage}.environment}
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  logRetentionInDays: 14
  logs:
    restApi: true
  environment:
    ENV_ID: 767397858839
    STAGE: ${self:provider.stage, 'dev'}
    REGION: ap-south-1
    USER_POOL_APP: ${file(../env.yml):${opt:stage}.userPoolApp}
    USER_POOL_APP_CLIENT: ${file(../env.yml):${opt:stage}.userPoolAppClient}
    USER_POOL_ADMIN: ${file(../env.yml):${opt:stage}.userPoolAdminApp}
    USER_POOL_ADMIN_CLIENT: ${file(../env.yml):${opt:stage}.userPoolAdminClient}
    DEPLOYMENT_BUCKET: ${file(../env.yml):${opt:stage}.deploymentBucket}
    ALLOWED_ORIGINS_S3: ${file(../env.yml):${opt:stage}.allowedOriginsS3}
    ALLOWED_ORIGINS: ${file(../env.yml):${opt:stage}.allowedOrigins}
    ALLOWED_ORIGINS_CF: ${file(../env.yml):${opt:stage}.allowedOriginsCF}
    FRONTEND_BUCKET: ${file(../env.yml):${opt:stage}.frontendBucket}
    UPLOAD_BUCKET: ${file(../env.yml):${opt:stage}.uploadBucket}
    PUBLIC_BUCKET: ${file(../env.yml):${opt:stage}.publicBucket}
    ACCESS_LOGS_BUCKET: ${file(../env.yml):${opt:stage}.accessLogsBucket}
    DB_SUBNET_GROUP: DBSubnetGroup 
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: happ-dev-serverless-deployment # Deployment bucket name. Default is generated by the framework

# package:
#   include:
#     - '**/*'
   
custom:
  prune:
    automatic: true
    number: 3
  warningThreshold: 100
   

functions:
  hello:
    handler: route.hello
    events:
      - httpApi:
          path: /resource-creation/hello
          method: get


plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - serverless-cloudformation-resource-counter
  # - serverless-api-gateway-throttling

resources:
  Resources:
    FrontendBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn: AccessLogsBucket
      Properties:
        BucketName: ${self:provider.environment.FRONTEND_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          ErrorDocument: index.html
          IndexDocument: index.html
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: Old_Objects_Moving_Rule
              Status: Enabled
              NoncurrentVersionTransition:
                NewerNoncurrentVersions: 10
                TransitionInDays: 14
                StorageClass: INTELLIGENT_TIERING
        LoggingConfiguration:
          DestinationBucketName: happ-${self:provider.stage}-access-logs
          LogFilePrefix: happ-${self:provider.stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    
    UploadBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn: AccessLogsBucket
      Properties:
        BucketName: ${self:provider.environment.UPLOAD_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedOrigins: ['*']
              AllowedMethods: ['PUT', 'GET']
              ExposedHeaders: ['ETag']
              MaxAge: '3000'
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        LifecycleConfiguration:
          Rules:
            - Id: Old_Objects_Moving_Rule
              Status: Enabled
              NoncurrentVersionTransition:
                NewerNoncurrentVersions: 10
                TransitionInDays: 14
                StorageClass: INTELLIGENT_TIERING
        LoggingConfiguration:
          DestinationBucketName: happ-${self:provider.stage}-access-logs
          LogFilePrefix: happ-${self:provider.stage}

    PublicBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn: AccessLogsBucket
      Properties:
        BucketName: ${self:provider.environment.PUBLIC_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedOrigins: ['*']
              AllowedMethods: ['PUT', 'GET']
              ExposedHeaders: ['ETag']
              MaxAge: '3000'
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        LifecycleConfiguration:
          Rules:
            - Id: Old_Objects_Moving_Rule
              Status: Enabled
              NoncurrentVersionTransition:
                NewerNoncurrentVersions: 10
                TransitionInDays: 14
                StorageClass: INTELLIGENT_TIERING
        LoggingConfiguration:
          DestinationBucketName: happ-${self:provider.stage}-access-logs
          LogFilePrefix: happ-${self:provider.stage}

    AccessLogsBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.ACCESS_LOGS_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: FrontendBucket
      Properties:
        Bucket:
          Ref: "FrontendBucket"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicWritePutObjectDeny
              Effect: Deny
              Principal: "*"
              Action: s3:PutObject
              Resource:
                - !Join [ '', [ 'arn:aws:s3:::', Ref: FrontendBucket,'/*','.exe' ] ]
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource:
                Fn::Join: ['', ['arn:aws:s3:::', Ref: FrontendBucket, '/*'] ]

    UploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: UploadBucket
      Properties:
        Bucket:
          Ref: "UploadBucket"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicWritePutObject
              Effect: Allow
              Principal: "*"
              Action: s3:PutObject
              Resource:
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.jpeg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.jpg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.pdf' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.csv' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.doc' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.docx' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.xls' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.xlsx' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.JPEG' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.JPG' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.PDF' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.CSV' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.DOC' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.DOCX' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.XLS' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.XLSX' ] ]
            - Sid: PublicWritePutObjectDeny
              Effect: Deny
              Principal: "*"
              Action: s3:PutObject
              NotResource:
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.jpeg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.jpg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.pdf' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.csv' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.doc' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.docx' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.xls' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.xlsx' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.JPEG' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.JPG' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.PDF' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.CSV' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.DOC' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.DOCX' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.XLS' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: UploadBucket,'/*','.XLSX' ] ]

    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: PublicBucket
      Properties:
        Bucket:
          Ref: "PublicBucket"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicWritePutObject
              Effect: Allow
              Principal: "*"
              Action: s3:PutObject
              Resource:
                - !Join [ '', [ 'arn:aws:s3:::', Ref: PublicBucket,'/*','.jpeg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: PublicBucket,'/*','.jpg' ] ]
            - Sid: PublicWritePutObjectDeny
              Effect: Deny
              Principal: "*"
              Action: s3:PutObject
              NotResource:
                - !Join [ '', [ 'arn:aws:s3:::', Ref: PublicBucket,'/*','.jpeg' ] ]
                - !Join [ '', [ 'arn:aws:s3:::', Ref: PublicBucket,'/*','.jpg' ] ]
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource:
                Fn::Join: ['', ['arn:aws:s3:::', Ref: PublicBucket, '/*'] ]
    
    CognitoUserPoolApp:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_APP}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        EmailVerificationSubject: 'Your Confirmation Code'
        EmailVerificationMessage: 'Your Confirmation Code is {####}.'
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: lastName
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: type
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: primaryRole
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: organizationId
            AttributeDataType: Number
            Mutable: true
            Required: false
          - Name: userId
            AttributeDataType: String
            Mutable: false
            Required: false

    CognitoUserPoolClientApp:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: CognitoUserPoolApp
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_APP_CLIENT}
        UserPoolId:
          Ref: CognitoUserPoolApp
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    CognitoUserPoolAdmin:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_ADMIN}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        EmailVerificationSubject: 'Your Confirmation Code'
        EmailVerificationMessage: 'Your Confirmation Code is {####}.'
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: lastName
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: type
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: primaryRole
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: organizationId
            AttributeDataType: Number
            Mutable: true
            Required: false
          - Name: userId
            AttributeDataType: String
            Mutable: false
            Required: false

    CognitoUserPoolClientAdmin:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: CognitoUserPoolAdmin
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_ADMIN_CLIENT}
        UserPoolId:
          Ref: CognitoUserPoolAdmin
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    Vpc:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.0.0.0/16
        InstanceTenancy: default

    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.0.0/18
        VpcId: 
          Ref: Vpc

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1a
        CidrBlock: 10.0.64.0/18
        VpcId: 
          Ref: Vpc

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1b
        CidrBlock: 10.0.128.0/18
        VpcId: 
          Ref: Vpc

    PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1c
        CidrBlock: 10.0.200.0/18
        VpcId: 
          Ref: Vpc

    DBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties: 
        DBSubnetGroupName: PrivateDbSubnet
        DBSubnetGroupDescription: PrivateDbSubnet
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
          - Ref: PrivateSubnet3

    DatabaseVpcSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: DBSecurityGroup
        GroupDescription: Allow local access
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
        VpcId: 
          Ref: Vpc

    MyDBCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        DBClusterIdentifier: my-cluster
        MasterUsername: admin
        MasterUserPassword: mypassword
        DatabaseName: mydatabase
        AllocatedStorage: 20
        Engine: mysql
        DBSubnetGroupName: !Ref DBSubnetGroup
        DeletionProtection: true
        CopyTagsToSnapshot: true
        VpcSecurityGroupIds:
          - !GetAtt DatabaseVpcSecurityGroup.GroupId

    Database:
      Type: AWS::RDS::DBInstance
      Properties:
        DBClusterIdentifier: !Ref MyDBCluster
        DBInstanceClass: db.t3.micro # db.r6g.large add this when create dev env
        DBSubnetGroupName: !Ref DBSubnetGroup
        Engine: mysql
        PubliclyAccessible: false

    